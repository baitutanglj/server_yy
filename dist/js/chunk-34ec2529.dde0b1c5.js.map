{"version":3,"sources":["webpack:///./src/assets/images/chem.png","webpack:///./src/assets/images/modelImg.jpeg","webpack:///./src/views/Home/Home.vue?fcd0","webpack:///src/views/Home/Home.vue","webpack:///./src/views/Home/Home.vue?9223","webpack:///./src/views/Home/Home.vue?33c7","webpack:///./src/assets/images/toto.jpg","webpack:///./src/assets/images/cut.jpg","webpack:///./src/views/Home/Home.vue?d711"],"names":["module","exports","render","_vm","this","_h","$createElement","_c","_self","staticClass","attrs","staticStyle","userImg","_v","cutImg","modelImg","staticRenderFns","component"],"mappings":"qGAAAA,EAAOC,QAAU,IAA0B,yB,uBCA3CD,EAAOC,QAAU,IAA0B,8B,2CCA3C,IAAIC,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,SAAS,CAACE,YAAY,OAAOC,MAAM,CAAC,OAAS,KAAK,CAACH,EAAG,SAAS,CAACI,YAAY,CAAC,aAAa,QAAQD,MAAM,CAAC,KAAO,IAAI,CAACH,EAAG,UAAU,CAACG,MAAM,CAAC,OAAS,UAAU,CAACH,EAAG,MAAM,CAACE,YAAY,QAAQ,CAACF,EAAG,MAAM,CAACG,MAAM,CAAC,IAAMP,EAAIS,WAAWL,EAAG,MAAM,CAACE,YAAY,YAAY,CAACF,EAAG,IAAI,CAACE,YAAY,QAAQ,CAACN,EAAIU,GAAG,iBAAiBN,EAAG,UAAUA,EAAG,MAAM,CAACE,YAAY,cAAc,CAACF,EAAG,IAAI,CAACJ,EAAIU,GAAG,SAASN,EAAG,OAAO,CAACJ,EAAIU,GAAG,aAAaN,EAAG,IAAI,CAACJ,EAAIU,GAAG,cAAcN,EAAG,UAAU,CAACG,MAAM,CAAC,KAAO,+CAA+C,OAAS,WAAW,CAACP,EAAIU,GAAG,mDAAmD,OAAON,EAAG,UAAU,CAACI,YAAY,CAAC,aAAa,SAAS,CAACJ,EAAG,MAAM,CAACE,YAAY,gBAAgB,CAACF,EAAG,IAAI,CAACJ,EAAIU,GAAG,gDAAgDN,EAAG,IAAI,CAACJ,EAAIU,GAAG,sGAAsGN,EAAG,IAAI,CAACJ,EAAIU,GAAG,qJAAqJN,EAAG,IAAI,CAACJ,EAAIU,GAAG,4RAA4R,GAAGN,EAAG,SAAS,CAACI,YAAY,CAAC,aAAa,QAAQD,MAAM,CAAC,KAAO,KAAK,CAACH,EAAG,UAAU,CAACI,YAAY,CAAC,OAAS,OAAOD,MAAM,CAAC,OAAS,UAAU,CAACH,EAAG,MAAM,CAACE,YAAY,QAAQ,CAACF,EAAG,MAAM,CAACG,MAAM,CAAC,IAAMP,EAAIW,UAAUP,EAAG,MAAM,CAACE,YAAY,YAAY,CAACF,EAAG,IAAI,CAACE,YAAY,SAAS,CAACN,EAAIU,GAAG,QAAQN,EAAG,IAAI,CAACE,YAAY,gBAAgB,CAACN,EAAIU,GAAG,mLAAmLN,EAAG,MAAM,CAACE,YAAY,SAAS,CAACF,EAAG,UAAU,CAACG,MAAM,CAAC,OAAS,UAAU,CAACH,EAAG,IAAI,CAACE,YAAY,SAAS,CAACN,EAAIU,GAAG,QAAQN,EAAG,MAAM,CAACI,YAAY,CAAC,QAAU,QAAQ,OAAS,UAAUD,MAAM,CAAC,IAAMP,EAAIY,YAAYR,EAAG,IAAI,CAACE,YAAY,gBAAgB,CAACN,EAAIU,GAAG,iQAAiQ,GAAGN,EAAG,QAAQ,IAAI,IAC16ES,EAAkB,GC0FtB,GACE,KADF,WAEI,MAAJ,CACM,QAAN,UACM,SAAN,UACM,OAAN,UACM,QAAN,aCjG6V,I,wBCQzVC,EAAY,eACd,EACAf,EACAc,GACA,EACA,KACA,WACA,MAIa,aAAAC,E,8BCnBfjB,EAAOC,QAAU,IAA0B,yB,uBCA3CD,EAAOC,QAAU,IAA0B,wB,kCCA3C,yBAAsjB,EAAG,G","file":"js/chunk-34ec2529.dde0b1c5.js","sourcesContent":["module.exports = __webpack_public_path__ + \"img/chem.95e4e11b.png\";","module.exports = __webpack_public_path__ + \"img/modelImg.1cdd19c3.jpeg\";","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('el-row',{staticClass:\"home\",attrs:{\"gutter\":20}},[_c('el-col',{staticStyle:{\"margin-top\":\"20px\"},attrs:{\"span\":8}},[_c('el-card',{attrs:{\"shadow\":\"hover\"}},[_c('div',{staticClass:\"user\"},[_c('img',{attrs:{\"src\":_vm.userImg}}),_c('div',{staticClass:\"userinfo\"},[_c('p',{staticClass:\"name\"},[_vm._v(\"SyntaLinker\")]),_c('br')])]),_c('div',{staticClass:\"login-info\"},[_c('p',[_vm._v(\"发表时间：\"),_c('span',[_vm._v(\"2020年\")])]),_c('p',[_vm._v(\"github地址： \"),_c('el-link',{attrs:{\"href\":\"https://github.com/YuYaoYang2333/SyntaLinker\",\"target\":\"_blank\"}},[_vm._v(\"https://github.com/YuYaoYang2333/SyntaLinker\")])],1)])]),_c('el-card',{staticStyle:{\"margin-top\":\"20px\"}},[_c('div',{staticClass:\"introduction\"},[_c('p',[_vm._v(\" 文章发表在英国皇家化学学会出版的化学核心期刊Chemical Science上。 \")]),_c('p',[_vm._v(\" 题为“SyntaLinker: Automatic Fragment Linking with Deep Conditional Transformer Neural Networks”。 \")]),_c('p',[_vm._v(\" 文章提出一种基于Transformer神经网络的片段连接生成器SyntaLinker。 它通过学习现有化合物数据库中大量分子的隐含连接规则来建立生成模型， 训练好的模型可根据给定的起始分子片段结构和自定义的连接段(Linker)约束条件， 自动生成大量符合约束条件且结构多样的分子。 \")]),_c('p',[_vm._v(\" 作者通过大量分析证明，这种生成模型能够学习和推断与预定义约束条件匹配的新颖连接片段。 此外，作者还建立了具有多重药效团约束的模型，以进行更精确的连接片段设计。 更重要的是，通过几个案例研究示例，证明了这种方法可以应用于片段连接， 先导物优化和骨架跃迁等多种药物设计任务。大多数生成的分子具有比原始先导化合物更好的对接分数， 同时能保持与原有片段相似的结合模式，并与PDB晶体结构中的原始配体构象具有高度三维形状相似性。 我们期望SyntaLinker可以成为进行基于片段的药物设计或者骨架跃迁的一个有用工具，给化学家提供更多的启发性化学结构。 \")])])])],1),_c('el-col',{staticStyle:{\"margin-top\":\"20px\"},attrs:{\"span\":16}},[_c('el-card',{staticStyle:{\"height\":\"40%\"},attrs:{\"shadow\":\"hover\"}},[_c('div',{staticClass:\"data\"},[_c('img',{attrs:{\"src\":_vm.cutImg}}),_c('div',{staticClass:\"datainfo\"},[_c('p',{staticClass:\"theme\"},[_vm._v(\"数据\")]),_c('p',{staticClass:\"introduction\"},[_vm._v(\" 作者利用切割算法人为构造了所需的片段-分子对作为训练数据。 采用分子对匹配算法（MMPs, Matched Molecular Pairs）的切割方式， 将一个分子拆解成两个终端片段和一个连接段，同时加上一些合理的筛选条件， 使得产生的片段-分子对更加合理。作者最终共计从ChEMBL数据库中提取出了70多万条隐含的分子连接数据。 \")])])])]),_c('div',{staticClass:\"model\"},[_c('el-card',{attrs:{\"shadow\":\"hover\"}},[_c('p',{staticClass:\"theme\"},[_vm._v(\"模型\")]),_c('img',{staticStyle:{\"display\":\"block\",\"margin\":\"0 auto\"},attrs:{\"src\":_vm.modelImg}}),_c('p',{staticClass:\"introduction\"},[_vm._v(\" 作者的目的是实现给定起始终端片段和自定义连接段约束条件的情况下， 模型能生成大批符合要求且结构多样的类药性分子。 因此，作者将这一问题类比成自然语言处理（NLP）中的完成句子（Sentence Completion）任务， 借鉴神经机器翻译（Transformer）模型，构建了深度条件生成模型SyntaLinker。SyntaLinker包含两种类型的约束， 即连接段最短键长（SLBD）和药效团等多重混合约束， 用户可以根据特定靶点蛋白口袋的具体信息，定义合理的约束条件，生成预期的分子。 \")])])],1),_c('div')],1)],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <el-row class=\"home\" :gutter=\"20\">\n    <el-col :span=\"8\" style=\"margin-top: 20px\">\n      <!--shadow属性设置卡片阴影出现的时机-->\n      <el-card shadow='hover'>\n        <div class=\"user\">\n          <img :src=\"userImg\"/>\n          <div class=\"userinfo\">\n            <p class=\"name\">SyntaLinker</p>\n            <br>\n          </div>\n        </div>\n        <div class=\"login-info\">\n          <p>发表时间：<span>2020年</span></p>\n          <p>github地址：\n            <el-link href=\"https://github.com/YuYaoYang2333/SyntaLinker\" target=\"_blank\">https://github.com/YuYaoYang2333/SyntaLinker</el-link>\n          </p>\n        </div>\n      </el-card>\n\n      <el-card style=\"margin-top: 20px\">\n        <div class=\"introduction\">\n          <p >\n            文章发表在英国皇家化学学会出版的化学核心期刊Chemical Science上。\n          </p>\n          <p>\n            题为“SyntaLinker: Automatic Fragment Linking with Deep Conditional Transformer Neural Networks”。\n          </p>\n          <p>\n            文章提出一种基于Transformer神经网络的片段连接生成器SyntaLinker。\n            它通过学习现有化合物数据库中大量分子的隐含连接规则来建立生成模型，\n            训练好的模型可根据给定的起始分子片段结构和自定义的连接段(Linker)约束条件，\n            自动生成大量符合约束条件且结构多样的分子。\n          </p>\n          <p>\n            作者通过大量分析证明，这种生成模型能够学习和推断与预定义约束条件匹配的新颖连接片段。\n            此外，作者还建立了具有多重药效团约束的模型，以进行更精确的连接片段设计。\n            更重要的是，通过几个案例研究示例，证明了这种方法可以应用于片段连接，\n            先导物优化和骨架跃迁等多种药物设计任务。大多数生成的分子具有比原始先导化合物更好的对接分数，\n            同时能保持与原有片段相似的结合模式，并与PDB晶体结构中的原始配体构象具有高度三维形状相似性。\n            我们期望SyntaLinker可以成为进行基于片段的药物设计或者骨架跃迁的一个有用工具，给化学家提供更多的启发性化学结构。\n          </p>\n        </div>\n      </el-card>\n\n    </el-col>\n    <el-col :span=\"16\" style=\"margin-top: 20px\">\n<!--      <el-card shadow=\"hover\" style=\"height: 350px\">-->\n<!--        <div class=\"model\">-->\n<!--          <img :src=\"modelImg\" style=\"height:300px; width:1200px;margin: 0 auto\"/>-->\n<!--        </div>-->\n<!--      </el-card>-->\n      <el-card shadow='hover' style=\"height: 40% \">\n        <div class=\"data\">\n          <img :src=\"cutImg\"/>\n          <div class=\"datainfo\">\n            <p class=\"theme\">数据</p>\n            <p class=\"introduction\">\n              作者利用切割算法人为构造了所需的片段-分子对作为训练数据。\n              采用分子对匹配算法（MMPs, Matched Molecular Pairs）的切割方式，\n              将一个分子拆解成两个终端片段和一个连接段，同时加上一些合理的筛选条件，\n              使得产生的片段-分子对更加合理。作者最终共计从ChEMBL数据库中提取出了70多万条隐含的分子连接数据。\n            </p>\n          </div>\n        </div>\n      </el-card>\n      <div class=\"model\">\n        <el-card shadow=\"hover\">\n          <p class=\"theme\">模型</p>\n          <img :src=\"modelImg\" style=\"display:block;margin:0 auto\"/>\n          <p class=\"introduction\">\n            作者的目的是实现给定起始终端片段和自定义连接段约束条件的情况下，\n            模型能生成大批符合要求且结构多样的类药性分子。\n            因此，作者将这一问题类比成自然语言处理（NLP）中的完成句子（Sentence Completion）任务，\n            借鉴神经机器翻译（Transformer）模型，构建了深度条件生成模型SyntaLinker。SyntaLinker包含两种类型的约束，\n            即连接段最短键长（SLBD）和药效团等多重混合约束，\n            用户可以根据特定靶点蛋白口袋的具体信息，定义合理的约束条件，生成预期的分子。\n          </p>\n        </el-card>\n<!--        <el-card shadow=\"hover\" style=\"height: 260px\">-->\n<!--          <img :src=\"cutImg\" style=\"margin: 0 auto\"/>-->\n<!--        </el-card>-->\n      </div>\n      <div>\n\n      </div>\n    </el-col>\n  </el-row>\n</template>\n\n<script>\n    export default {\n      data() {\n        return {\n          userImg: require('../../assets/images/chem.png'),\n          modelImg: require('../../assets/images/modelImg.jpeg'),\n          cutImg: require('../../assets/images/cut.jpg'),\n          totoImg:require('../../assets/images/toto.jpg'),\n            }\n        },\n        // methods: {\n        //     getTableData() {\n        //         this.$http.get('/home/getData').then(res => {\n        //             res = res.data\n        //             this.tableData = res.data.tableData\n        //         })\n        //     }\n\n\n        // },\n        //一进组件就会去请求后端接口 获取首页数据\n        // created() {\n        //     this.getTableData()\n        // }\n\n    }\n\n\n</script>\n\n<style lang=\"scss\" scoped>\n    @import '~@/assets/scss/home';\n</style>\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Home.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Home.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Home.vue?vue&type=template&id=48c76295&scoped=true&\"\nimport script from \"./Home.vue?vue&type=script&lang=js&\"\nexport * from \"./Home.vue?vue&type=script&lang=js&\"\nimport style0 from \"./Home.vue?vue&type=style&index=0&id=48c76295&lang=scss&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"48c76295\",\n  null\n  \n)\n\nexport default component.exports","module.exports = __webpack_public_path__ + \"img/toto.e3482298.jpg\";","module.exports = __webpack_public_path__ + \"img/cut.d5dac7e7.jpg\";","import mod from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Home.vue?vue&type=style&index=0&id=48c76295&lang=scss&scoped=true&\"; export default mod; export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Home.vue?vue&type=style&index=0&id=48c76295&lang=scss&scoped=true&\""],"sourceRoot":""}